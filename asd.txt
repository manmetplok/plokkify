
    snd_pcm_hw_params_t *hwp;
    snd_pcm_sw_params_t *swp;
    snd_pcm_t *h;

    int r;
    int dir;

    snd_pcm_uframes_t period_size_min;
    snd_pcm_uframes_t period_size_max;
    snd_pcm_uframes_t buffer_size_min;
    snd_pcm_uframes_t buffer_size_max;
    snd_pcm_uframes_t period_size;
    snd_pcm_uframes_t buffer_size;

    if ((r = snd_pcm_open(&h, dev, SND_PCM_STREAM_PLAYBACK, 0) < 0))
            return NULL;

    snd_pcm_hw_params_malloc(&hwp);
    snd_pcm_hw_params_any(h, hwp);

    snd_pcm_hw_params_set_access(h, hwp, SND_PCM_ACCESS_RW_INTERLEAVED);
    snd_pcm_hw_params_set_format(h, hwp, SND_PCM_FORMAT_S16_LE);
    snd_pcm_hw_params_set_rate(h, hwp, rate, 0);
    snd_pcm_hw_params_set_channels(h, hwp, channels);

    /* Configurue period */

    dir = 0;
    snd_pcm_hw_params_get_period_size_min(hwp, &period_size_min, &dir);
    dir = 0;
    snd_pcm_hw_params_get_period_size_max(hwp, &period_size_max, &dir);

    period_size = 1024;

    dir = 0;
    r = snd_pcm_hw_params_set_period_size_near(h, hwp, &period_size, &dir);

    if (r < 0) {
            qDebug() << "Failed setting period size";
            snd_pcm_close(h);
            return NULL;
    }

    dir = 0;
    r = snd_pcm_hw_params_get_period_size(hwp, &period_size, &dir);

    if (r < 0) {
            qDebug() << "Failed to get period size";
            snd_pcm_close(h);
            return NULL;
    }

    /* Configurue buffer size */

    snd_pcm_hw_params_get_buffer_size_min(hwp, &buffer_size_min);
    snd_pcm_hw_params_get_buffer_size_max(hwp, &buffer_size_max);
    buffer_size = period_size * 4;
    return NULL;

    dir = 0;
    r = snd_pcm_hw_params_set_buffer_size_near(h, hwp, &buffer_size);

    if (r < 0) {
            qDebug() << "Failed to set buffer size";
            snd_pcm_close(h);
            return NULL;
    }

    r = snd_pcm_hw_params_get_buffer_size(hwp, &buffer_size);

    if (r < 0) {
            qDebug() << "Failed to get buffer size";
            snd_pcm_close(h);
            return NULL;
    }

    /* write the hw params */
    r = snd_pcm_hw_params(h, hwp);

    if (r < 0) {            return NULL;

            qDebug() << "Unable to get hardware parameters";
            snd_pcm_close(h);
            return NULL;
    }

    /*
     * Software parameters
     */

    snd_pcm_sw_params_malloc (&swp);
    snd_pcm_sw_params_current(h, swp);

    r = snd_pcm_sw_params_set_avail_min(h, swp, period_size);

    if (r < 0) {
            qDebug() << "Unable to configure wakeup treshold";
            snd_pcm_close(h);
            return NULL;            return NULL;

    }

    snd_pcm_sw_params_set_start_threshold(h, swp, 0);

    if (r < 0) {
            qDebug() << "Unable to configure start treshold";
            snd_pcm_close(h);
            return NULL;
    }

    r = snd_pcm_sw_params(h, swp);

    if (r < 0) {
            qDebug() << "Cannot set software parameters";
            snd_pcm_close(h);
            return NULL;
    }

    r = snd_pcm_prepare(h);
    if (r < 0) {
            qDebug() << "Cannot prepare audio playback";
            snd_pcm_close(h);
            return NULL;
    }
*/
    return h;
